---
/**
 * In pursuit of dependency minimization, raw JS is used via an inline script
 * to populate the recent payloads table, on-demand
 * FIXME: should use cursor navigation to prevent duplicates on table update
 */
import { collectPayloads, Payload } from "../pages/formatted";

// Table headers
const headers: string[] = [
  "Slot",
  "Relay",
  "Parent Hash",
  "Block Hash",
  "Builder",
  "Proposer",
];

// Collect latest 25 payloads
const data: Payload[] = await collectPayloads();
---

<div class="payloads">
  {/* Table header */}
  <div class="payloads-title">
    <h3>Recent blocks</h3>
    <p>Delivered blocks sorted by slot.</p>
  </div>

  <div class="payloads-table">
    <table id="payloads-table-ref">
      {/* Render headers */}
      <tr>
        {headers.map((key: string) => <th>{key}</th>)}
      </tr>

      {/* Render rows */}
      {
        data.map((p: any) => (
          <tr>
            {/* Slot */}
            <td>
              <a href={p.slot.url} target="_blank" rel="noopener noreferrer">
                {p.slot.text}
              </a>
            </td>

            {/* Relay */}
            <td>{p.relay}</td>

            {/* Parent Hash */}
            <td>
              <a
                href={p.parent_hash.url}
                target="_blank"
                rel="noopener noreferrer"
              >
                {p.parent_hash.text}
              </a>
            </td>

            {/* Block Hash */}
            <td>
              <a
                href={p.block_hash.url}
                target="_blank"
                rel="noopener noreferrer"
              >
                {p.block_hash.text}
              </a>
            </td>

            {/* Builder */}
            <td>{p.builder}</td>

            {/* Proposer */}
            <td>{p.proposer}</td>
          </tr>
        ))
      }
    </table>
  </div>

  <button class="payloads-more" onclick="loadMore()">Load 25 More</button>
</div>

<script is:inline>
  /**
   * Creates <a> element with url and text
   */
  function createLink(url, text) {
    const link = document.createElement("a");
    link.href = url;
    link.text = text;
    link.target = "_blank";
    link.rel = "noopener noreferrer";
    return link;
  }

  /**
   * Creates <tr> element containing children
   */
  function generateRow(data) {
    // Row
    const tableRow = document.createElement("tr");

    // Slot
    const slotTd = document.createElement("td");
    const slotLink = createLink(data.slot.url, data.slot.text);
    slotTd.appendChild(slotLink);

    // Relay
    const relayTd = document.createElement("td");
    relayTd.innerHTML = data.relay;

    // Parent Hash
    const parentHashTd = document.createElement("td");
    const parentHashLink = createLink(
      data.parent_hash.url,
      data.parent_hash.text
    );
    parentHashTd.appendChild(parentHashLink);

    // Block Hash
    const blockHashTd = document.createElement("td");
    const blockHashLink = createLink(data.block_hash.url, data.block_hash.text);
    blockHashTd.appendChild(blockHashLink);

    // Builder
    const builderTd = document.createElement("td");
    builderTd.innerHTML = data.builder;

    // Proposer
    const proposerTd = document.createElement("td");
    proposerTd.innerHTML = data.proposer;

    // Append to row
    tableRow.appendChild(slotTd);
    tableRow.appendChild(relayTd);
    tableRow.appendChild(parentHashTd);
    tableRow.appendChild(blockHashTd);
    tableRow.appendChild(builderTd);
    tableRow.appendChild(proposerTd);

    return tableRow;
  }

  /**
   * Load 25 additional payloads from database
   */
  async function loadMore() {
    // Check for global offset store
    if (!window.RelayReviewOffset) window.RelayReviewOffset = 25;

    // Collect payloads
    const response = await fetch(
      `/formatted?offset=${window.RelayReviewOffset}`
    );
    const data = await response.json();

    // Find table
    const table = document.getElementById("payloads-table-ref");

    // Generate rows
    for (const payload of data) {
      table.appendChild(generateRow(payload));
    }

    // Increment offset
    window.RelayReviewOffset = window.RelayReviewOffset + 25;
  }
</script>

<style lang="scss">
  .payloads {
    .payloads-title {
      padding: 24px;
      border-bottom: 1px solid #ececec;
      background-color: rgba(0, 0, 0, 0.02);

      h3 {
        margin: 0px;
        margin-bottom: 5px;
        font-size: 16px;
        color: rgba(0, 0, 0, 0.8);
      }

      p {
        margin: 0px;
        font-size: 14px;
        line-height: 150%;
      }
    }

    .payloads-table {
      overflow-x: auto;

      table {
        min-width: 1200px;
      }
    }
  }

  .payloads-more {
    width: 100%;
    border: none;
    background-color: #ececec;
    font-weight: bold;
    font-size: 14px;
    color: rgba(0, 0, 0, 0.8);
    padding: 15px;
    cursor: pointer;

    &:hover {
      opacity: 0.8;
    }
  }
</style>
