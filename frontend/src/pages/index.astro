---
import Redis from "ioredis";
import Stat from "../components/Stat.astro";
import Layout from "../layouts/Layout.astro";
import Ranking from "../components/Ranking.astro";
import Payloads from "../components/Payloads.astro";

type Stats = {
  total: number;
  sample: number;
  builders: { builder_pubkey: string; count: number }[];
  relays: { name: string; reward: number; count: number }[];
};

// Setup redis
const redis = new Redis(import.meta.env.REDIS_URL);

// Collect stats from Redis
const statsStr: string | null = await redis.get("stats");
const stats: Stats = JSON.parse(statsStr ?? "");
---

<Layout>
  <main>
    {/* General Statistics */}
    <div class="stat-list">
      {/* Total payloads delivered */}
      <Stat
        title="Payload count"
        value={stats.total.toLocaleString("us-en")}
        context="Total payloads delivered by all relays."
      />

      {/* Relay dominance */}
      <Stat
        title={`${stats.relays[0]?.name} dominance`}
        value={`${(stats.relays[0]?.count ?? 0) / 10}%`}
        context={`Percentage of last 1,000 payloads delivered by ${stats.relays[0]?.name}.`}
      />

      {/* Active relays */}
      <Stat
        title="Active relays"
        value={stats.relays.length.toLocaleString("us-en")}
        context={`Number of relays delivering at least 1 of the last 1,000 payloads (${stats.relays
          .map(({ name }) => name)
          .join(", ")}).`}
      />
    </div>

    {/* Ranking tables */}
    <div class="ranking-list">
      {/* Top relays */}
      <Ranking
        title="Top relays"
        context="Relays sorted by participation in last 1,000 payloads."
        data={stats.relays
          // Filter for relays that have delivered at least 1 payload
          .filter(({ count }) => count > 0)
          // Setup table structure
          .map(({ name, reward, count }) => ({
            Relay: name,
            "Total value (ETH)": reward.toLocaleString("us-en"),
            "# Payloads": count,
          }))}
      />

      {/* Top builders */}
      <Ranking
        title="Top builders"
        context="Block builders sorted by participation in last 1,000 payloads."
        data={stats.builders
          // Filter for builders that have delivered at least 1 payload
          .filter(({ count }) => count > 0)
          // Setup table structure
          .map(({ builder_pubkey, count }) => ({
            Builder:
              builder_pubkey.substr(0, 10) +
              "..." +
              builder_pubkey.slice(builder_pubkey.length - 10),
            "# Payloads": count,
          }))}
      />
    </div>

    {/* Payloads table */}
    <Payloads />
  </main>
</Layout>

<style>
  .stat-list,
  .ranking-list {
    display: flex;
  }

  @media screen and (max-width: 800px) {
    .stat-list,
    .ranking-list {
      flex-direction: column;
    }
  }
</style>
