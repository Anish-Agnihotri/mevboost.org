---
import Redis from "ioredis";
import type { Stats } from "./stats";
import Stat from "../components/Stat.astro";
import Layout from "../layouts/Layout.astro";
import Ranking from "../components/Ranking.astro";
import Payloads from "../components/Payloads.astro";

// Setup redis
const redis = new Redis(import.meta.env.REDIS_URL);

// Collect stats from Redis
const statsStr: string | null = await redis.get("stats");
const stats: Stats = JSON.parse(statsStr ?? "");
---

<Layout>
  <main>
    {/* General Statistics */}
    <div class="stat-list">
      {/* Network participation */}
      <Stat
        title="Network participation"
        value={`${((stats.total_payloads / stats.total_blocks) * 100).toFixed(
          2
        )}%`}
        context={`% of MEV-Boost blocks (${stats.total_payloads.toLocaleString(
          "us-en"
        )} relayed; ${stats.total_blocks.toLocaleString("us-en")} total).`}
      />

      {/* Relay dominance */}
      <Stat
        title={`${stats.relays[0]?.name} dominance`}
        value={`${(
          ((stats.relays[0]?.count ?? 0) / stats.total_payloads) *
          100
        ).toFixed(2)}%`}
        context={`% of MEV-Boost blocks relayed by ${stats.relays[0]?.name}.`}
      />

      {/* Active relays */}
      <Stat
        title="Active relays"
        value={stats.relays.length.toLocaleString("us-en")}
        context={`Relays that relayed at least one block (${stats.relays
          .map(({ name }) => name)
          .join(", ")}).`}
      />
    </div>

    {/* Ranking tables */}
    <div class="ranking-list">
      {/* Top relays */}
      <Ranking
        title="Top relays"
        context="Relays sorted by number of relayed blocks."
        data={stats.relays
          // Filter for relays that have relayed at least 1 payload
          .filter(({ count }) => count > 0)
          // Setup table structure
          .map(({ name, value, count, avg_value }) => ({
            Relay: name,
            "# Blocks": count,
            "Total value (ETH)": value.toLocaleString("us-en"),
            "Avg. block value": avg_value.toLocaleString("us-en"),
          }))}
      />

      {/* Top builders */}
      <Ranking
        title="Top builders"
        context="Block builders sorted by number of built blocks."
        data={stats.builders
          // Filter for builders that have built at least 1 block
          .filter(({ count }) => count > 0)
          // Setup table structure
          .map(({ pubkey, count, value, avg_value, last_relay }) => ({
            Builder:
              pubkey.substr(0, 10) + "..." + pubkey.slice(pubkey.length - 10),
            "# Blocks": count,
            "Total value (ETH)": value.toLocaleString("us-en"),
            "Avg. block value": avg_value.toLocaleString("us-en"),
            "Last used relay": last_relay,
          }))}
      />
    </div>

    {/* Payloads table */}
    <Payloads />
  </main>
</Layout>

<style>
  .stat-list,
  .ranking-list {
    display: flex;
  }

  @media screen and (max-width: 800px) {
    .stat-list,
    .ranking-list {
      flex-direction: column;
    }
  }
</style>
